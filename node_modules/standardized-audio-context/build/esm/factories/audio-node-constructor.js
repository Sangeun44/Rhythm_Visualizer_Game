import * as tslib_1 from "tslib";
import { EventTarget } from '../event-target';
import { AUDIO_NODE_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE } from '../globals';
import { isAudioNode } from '../guards/audio-node';
import { cacheTestResult } from '../helpers/cache-test-result';
import { getAudioGraph } from '../helpers/get-audio-graph';
import { getAudioNodeConnections } from '../helpers/get-audio-node-connections';
import { getAudioParamConnections } from '../helpers/get-audio-param-connections';
import { getNativeContext } from '../helpers/get-native-context';
import { testAudioNodeDisconnectMethodSupport } from '../support-testers/audio-node-disconnect-method';
import { wrapAudioNodeDisconnectMethod } from '../wrappers/audio-node-disconnect-method';
var addAudioNode = function (context, audioNode, audioNoderRender, nativeNode) {
    var audioGraphOfContext = getAudioGraph(context);
    var inputs = [];
    for (var i = 0; i < nativeNode.numberOfInputs; i += 1) {
        inputs.push(new Set());
    }
    var audioNodeConnections = { inputs: inputs, outputs: new Set(), renderer: audioNoderRender };
    audioGraphOfContext.nodes.set(audioNode, audioNodeConnections);
    audioGraphOfContext.nodes.set(nativeNode, audioNodeConnections);
};
var addConnectionToAudioNode = function (source, destination, output, input) {
    var audioNodeConnectionsOfSource = getAudioNodeConnections(source);
    var audioNodeConnectionsOfDestination = getAudioNodeConnections(destination);
    audioNodeConnectionsOfSource.outputs.add([destination, output, input]);
    audioNodeConnectionsOfDestination.inputs[input].add([source, output]);
};
var addConnectionToAudioParam = function (context, source, destination, output) {
    var audioNodeConnections = getAudioNodeConnections(source);
    var audioParamConnections = getAudioParamConnections(context, destination);
    audioNodeConnections.outputs.add([destination, output]);
    audioParamConnections.inputs.add([source, output]);
};
var removeAnyConnection = function (source) {
    var audioNodeConnectionsOfSource = getAudioNodeConnections(source);
    for (var _i = 0, _a = Array.from(audioNodeConnectionsOfSource.outputs.values()); _i < _a.length; _i++) {
        var destination = _a[_i][0];
        if (isAudioNode(destination)) {
            var audioNodeConnectionsOfDestination = getAudioNodeConnections(destination);
            for (var _b = 0, _c = audioNodeConnectionsOfDestination.inputs; _b < _c.length; _b++) {
                var connectionsToInput = _c[_b];
                for (var _d = 0, _e = Array.from(connectionsToInput.values()); _d < _e.length; _d++) {
                    var connection = _e[_d];
                    if (connection[0] === source) {
                        connectionsToInput.delete(connection);
                    }
                }
            }
        }
    }
    audioNodeConnectionsOfSource.outputs.clear();
};
var removeConnectionToAudioNode = function (source, destination) {
    var audioNodeConnectionsOfSource = getAudioNodeConnections(source);
    var audioNodeConnectionsOfDestination = getAudioNodeConnections(destination);
    for (var _i = 0, _a = Array.from(audioNodeConnectionsOfSource.outputs.values()); _i < _a.length; _i++) {
        var connection = _a[_i];
        if (connection[0] === destination) {
            audioNodeConnectionsOfSource.outputs.delete(connection);
        }
    }
    for (var _b = 0, _c = audioNodeConnectionsOfDestination.inputs; _b < _c.length; _b++) {
        var connectionsToInput = _c[_b];
        for (var _d = 0, _e = Array.from(connectionsToInput.values()); _d < _e.length; _d++) {
            var connection = _e[_d];
            if (connection[0] === source) {
                connectionsToInput.delete(connection);
            }
        }
    }
};
export var createAudioNodeConstructor = function (createInvalidAccessError, isNativeOfflineAudioContext) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(AudioNode, _super);
        function AudioNode(context, nativeNode, audioNodeRenderer) {
            var _this = _super.call(this) || this;
            _this._context = context;
            _this._nativeNode = nativeNode;
            var nativeContext = getNativeContext(context);
            // Bug #12: Firefox and Safari do not support to disconnect a specific destination.
            // @todo Make sure this is not used with an OfflineAudioContext.
            if (!isNativeOfflineAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, function () {
                return testAudioNodeDisconnectMethodSupport(nativeContext);
            })) {
                wrapAudioNodeDisconnectMethod(nativeNode);
            }
            AUDIO_NODE_STORE.set(_this, nativeNode);
            addAudioNode(context, _this, audioNodeRenderer, nativeNode);
            return _this;
        }
        Object.defineProperty(AudioNode.prototype, "channelCount", {
            get: function () {
                throw new Error('This needs to implemented.');
            },
            set: function (_) {
                throw new Error('This needs to implemented.');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioNode.prototype, "channelCountMode", {
            get: function () {
                throw new Error('This needs to implemented.');
            },
            set: function (_) {
                throw new Error('This needs to implemented.');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioNode.prototype, "channelInterpretation", {
            get: function () {
                return this._nativeNode.channelInterpretation;
            },
            set: function (value) {
                this._nativeNode.channelInterpretation = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioNode.prototype, "context", {
            get: function () {
                return this._context;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioNode.prototype, "numberOfInputs", {
            get: function () {
                return this._nativeNode.numberOfInputs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioNode.prototype, "numberOfOutputs", {
            get: function () {
                return this._nativeNode.numberOfOutputs;
            },
            enumerable: true,
            configurable: true
        });
        AudioNode.prototype.addEventListener = function (type, listener, // @todo EventListenerOrEventListenerObject | null = null,
        options) {
            return this._nativeNode.addEventListener(type, listener, options);
        };
        AudioNode.prototype.connect = function (destination, output, input) {
            if (output === void 0) { output = 0; }
            if (input === void 0) { input = 0; }
            var nativeContext = CONTEXT_STORE.get(this._context);
            if (isAudioNode(destination)) {
                // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.
                if (this._context !== destination.context) {
                    throw createInvalidAccessError();
                }
                if (nativeContext === undefined) {
                    throw new Error('The native (Offline)AudioContext is missing.');
                }
                if (!isNativeOfflineAudioContext(nativeContext)) {
                    var nativeDestinationNode = AUDIO_NODE_STORE.get(destination);
                    if (nativeDestinationNode === undefined) {
                        throw new Error('The associated nativeNode is missing.');
                    }
                    if (nativeDestinationNode.inputs !== undefined) {
                        var inputs = nativeDestinationNode.inputs;
                        var nativeInputDestinationNode = inputs[input];
                        this._nativeNode.connect(nativeInputDestinationNode, output, input);
                    }
                    else {
                        this._nativeNode.connect(nativeDestinationNode, output, input);
                    }
                }
                addConnectionToAudioNode(this, destination, output, input);
                return destination;
            }
            if (nativeContext === undefined) {
                throw new Error('The native (Offline)AudioContext is missing.');
            }
            var nativeAudioParam = AUDIO_PARAM_STORE.get(destination);
            if (nativeAudioParam === undefined) {
                throw new Error('The associated nativeAudioParam is missing.');
            }
            try {
                this._nativeNode.connect(nativeAudioParam, output);
                // @todo Calling connect() is only needed to throw possible errors when the nativeContext is an OfflineAudioContext.
                if (isNativeOfflineAudioContext(nativeContext)) {
                    this._nativeNode.disconnect(nativeAudioParam, output);
                }
            }
            catch (err) {
                // Bug #58: Only Firefox does throw an InvalidStateError yet.
                if (err.code === 12) {
                    throw createInvalidAccessError();
                }
                throw err;
            }
            addConnectionToAudioParam(this._context, this, destination, output);
        };
        AudioNode.prototype.disconnect = function (destination) {
            var nativeContext = CONTEXT_STORE.get(this._context);
            if (nativeContext === undefined) {
                throw new Error('The native (Offline)AudioContext is missing.');
            }
            if (!isNativeOfflineAudioContext(nativeContext)) {
                if (destination === undefined) {
                    return this._nativeNode.disconnect();
                }
                var nativeDestinationNode = AUDIO_NODE_STORE.get(destination);
                if (nativeDestinationNode === undefined) {
                    throw new Error('The associated nativeNode is missing.');
                }
                if (nativeDestinationNode.inputs !== undefined) {
                    for (var _i = 0, _a = nativeDestinationNode.inputs; _i < _a.length; _i++) {
                        var input = _a[_i];
                        this._nativeNode.disconnect(input);
                    }
                }
                else {
                    this._nativeNode.disconnect(nativeDestinationNode);
                }
            }
            if (destination === undefined) {
                removeAnyConnection(this);
            }
            else {
                removeConnectionToAudioNode(this, destination);
            }
        };
        AudioNode.prototype.removeEventListener = function (type, listener, // @todo EventListenerOrEventListenerObject | null = null,
        options) {
            return this._nativeNode.removeEventListener(type, listener, options);
        };
        return AudioNode;
    }(EventTarget));
};
//# sourceMappingURL=/build/es2015/factories/audio-node-constructor.js.map