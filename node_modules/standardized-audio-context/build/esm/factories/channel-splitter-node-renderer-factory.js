var _this = this;
import * as tslib_1 from "tslib";
import { getNativeNode } from '../helpers/get-native-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export var createChannelSplitterNodeRendererFactory = function (createNativeChannelSplitterNode) {
    return function () {
        var nativeNode = null;
        return {
            render: function (proxy, offlineAudioContext) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var options;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (nativeNode !== null) {
                                return [2 /*return*/, nativeNode];
                            }
                            nativeNode = getNativeNode(proxy);
                            // If the initially used nativeNode was not constructed on the same OfflineAudioContext it needs to be created again.
                            if (!isOwnedByContext(nativeNode, offlineAudioContext)) {
                                options = {
                                    channelCount: nativeNode.channelCount,
                                    channelCountMode: nativeNode.channelCountMode,
                                    channelInterpretation: nativeNode.channelInterpretation,
                                    numberOfOutputs: nativeNode.numberOfOutputs
                                };
                                nativeNode = createNativeChannelSplitterNode(offlineAudioContext, options);
                            }
                            return [4 /*yield*/, renderInputsOfAudioNode(proxy, offlineAudioContext, nativeNode)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, nativeNode];
                    }
                });
            }); }
        };
    };
};
//# sourceMappingURL=/build/es2015/factories/channel-splitter-node-renderer-factory.js.map