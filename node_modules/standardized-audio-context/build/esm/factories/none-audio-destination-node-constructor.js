import * as tslib_1 from "tslib";
export var createNoneAudioDestinationNodeConstructor = function (audioNodeConstructor, createInvalidStateError) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(NoneAudioDestinationNode, _super);
        function NoneAudioDestinationNode(context, nativeNode, audioNodeRenderer) {
            var _this = this;
            // Bug #50 Safari does not throw an error when the context is already closed.
            if (context.state === 'closed') {
                throw createInvalidStateError();
            }
            _this = _super.call(this, context, nativeNode, audioNodeRenderer) || this;
            _this._nativeNode = nativeNode;
            return _this;
        }
        Object.defineProperty(NoneAudioDestinationNode.prototype, "channelCount", {
            get: function () {
                return this._nativeNode.channelCount;
            },
            set: function (value) {
                this._nativeNode.channelCount = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NoneAudioDestinationNode.prototype, "channelCountMode", {
            get: function () {
                return this._nativeNode.channelCountMode;
            },
            set: function (value) {
                this._nativeNode.channelCountMode = value;
            },
            enumerable: true,
            configurable: true
        });
        return NoneAudioDestinationNode;
    }(audioNodeConstructor));
};
//# sourceMappingURL=/build/es2015/factories/none-audio-destination-node-constructor.js.map