import * as tslib_1 from "tslib";
import { getNativeContext } from '../helpers/get-native-context';
import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../wrappers/iir-filter-node-get-frequency-response-method';
// The DEFAULT_OPTIONS are only of type Partial<IIIRFilterOptions> because there are no default values for feedback and feedforward.
var DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers'
};
export var createIIRFilterNodeConstructor = function (createNativeIIRFilterNode, createIIRFilterNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(IIRFilterNode, _super);
        function IIRFilterNode(context, options) {
            var _this = this;
            var nativeContext = getNativeContext(context);
            var mergedOptions = tslib_1.__assign({}, DEFAULT_OPTIONS, options);
            var nativeNode = createNativeIIRFilterNode(nativeContext, mergedOptions);
            var iirFilterNodeRenderer = (isNativeOfflineAudioContext(nativeContext)) ?
                createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) :
                null;
            _this = _super.call(this, context, nativeNode, iirFilterNodeRenderer) || this;
            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.
            // @todo Write a test which allows other browsers to remain unpatched.
            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeNode);
            _this._nativeNode = nativeNode;
            return _this;
        }
        IIRFilterNode.prototype.getFrequencyResponse = function (frequencyHz, magResponse, phaseResponse) {
            return this._nativeNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
        };
        return IIRFilterNode;
    }(noneAudioDestinationNodeConstructor));
};
//# sourceMappingURL=/build/es2015/factories/iir-filter-node-constructor.js.map