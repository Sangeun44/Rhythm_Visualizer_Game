var _this = this;
import * as tslib_1 from "tslib";
import { connectAudioParam } from '../helpers/connect-audio-param';
import { getNativeNode } from '../helpers/get-native-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderAutomation } from '../helpers/render-automation';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export var createGainNodeRendererFactory = function (createNativeGainNode) {
    return function () {
        var nativeNode = null;
        return {
            render: function (proxy, offlineAudioContext) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var options;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (nativeNode !== null) {
                                return [2 /*return*/, nativeNode];
                            }
                            nativeNode = getNativeNode(proxy);
                            if (!!isOwnedByContext(nativeNode, offlineAudioContext)) return [3 /*break*/, 2];
                            options = {
                                channelCount: nativeNode.channelCount,
                                channelCountMode: nativeNode.channelCountMode,
                                channelInterpretation: nativeNode.channelInterpretation,
                                gain: nativeNode.gain.value
                            };
                            nativeNode = createNativeGainNode(offlineAudioContext, options);
                            return [4 /*yield*/, renderAutomation(proxy.context, offlineAudioContext, proxy.gain, nativeNode.gain)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, connectAudioParam(proxy.context, offlineAudioContext, proxy.gain)];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4: return [4 /*yield*/, renderInputsOfAudioNode(proxy, offlineAudioContext, nativeNode)];
                        case 5:
                            _a.sent();
                            return [2 /*return*/, nativeNode];
                    }
                });
            }); }
        };
    };
};
//# sourceMappingURL=/build/es2015/factories/gain-node-renderer-factory.js.map