import * as tslib_1 from "tslib";
import { wrapAudioBufferCopyChannelMethods } from '../wrappers/audio-buffer-copy-channel-methods';
var DEFAULT_OPTIONS = {
    numberOfChannels: 1
};
export var createMinimalOfflineAudioContextConstructor = function (minimalBaseAudioContextConstructor, nativeOfflineAudioContextConstructor, startRendering) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(MinimalOfflineAudioContext, _super);
        function MinimalOfflineAudioContext(options) {
            var _this = this;
            if (nativeOfflineAudioContextConstructor === null) {
                throw new Error(); // @todo
            }
            var _a = tslib_1.__assign({}, DEFAULT_OPTIONS, options), length = _a.length, numberOfChannels = _a.numberOfChannels, sampleRate = _a.sampleRate;
            var nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);
            _this = _super.call(this, nativeOfflineAudioContext, numberOfChannels) || this;
            _this._length = length;
            _this._nativeOfflineAudioContext = nativeOfflineAudioContext;
            return _this;
        }
        Object.defineProperty(MinimalOfflineAudioContext.prototype, "length", {
            get: function () {
                // Bug #17: Safari does not yet expose the length.
                if (this._nativeOfflineAudioContext.length === undefined) {
                    return this._length;
                }
                return this._nativeOfflineAudioContext.length;
            },
            enumerable: true,
            configurable: true
        });
        MinimalOfflineAudioContext.prototype.startRendering = function () {
            return startRendering(this.destination, this._nativeOfflineAudioContext)
                .then(function (audioBuffer) {
                // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
                if (typeof audioBuffer.copyFromChannel !== 'function') {
                    wrapAudioBufferCopyChannelMethods(audioBuffer);
                }
                return audioBuffer;
            });
        };
        return MinimalOfflineAudioContext;
    }(minimalBaseAudioContextConstructor));
};
//# sourceMappingURL=/build/es2015/factories/minimal-offline-audio-context-constructor.js.map