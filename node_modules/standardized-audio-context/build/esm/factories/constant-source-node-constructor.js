import * as tslib_1 from "tslib";
import { getNativeContext } from '../helpers/get-native-context';
var DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    offset: 1
};
export var createConstantSourceNodeConstructor = function (createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(ConstantSourceNode, _super);
        function ConstantSourceNode(context, options) {
            if (options === void 0) { options = DEFAULT_OPTIONS; }
            var _this = this;
            var nativeContext = getNativeContext(context);
            var mergedOptions = tslib_1.__assign({}, DEFAULT_OPTIONS, options);
            var nativeNode = createNativeConstantSourceNode(nativeContext, mergedOptions);
            var isOffline = isNativeOfflineAudioContext(nativeContext);
            var constantSourceNodeRenderer = (isOffline) ? createConstantSourceNodeRendererFactory() : null;
            _this = _super.call(this, context, nativeNode, constantSourceNodeRenderer) || this;
            _this._constantSourceNodeRenderer = constantSourceNodeRenderer;
            _this._nativeNode = nativeNode;
            /*
             * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and
             * minValue for GainNodes.
             * Bug #75: Firefox does not export the correct values for maxValue and minValue.
             */
            _this._offset = createAudioParam(context, isOffline, nativeNode.offset, 3.4028234663852886e38, -3.4028234663852886e38);
            return _this;
        }
        Object.defineProperty(ConstantSourceNode.prototype, "offset", {
            get: function () {
                return this._offset;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConstantSourceNode.prototype, "onended", {
            get: function () {
                return this._nativeNode.onended;
            },
            set: function (value) {
                this._nativeNode.onended = value;
            },
            enumerable: true,
            configurable: true
        });
        ConstantSourceNode.prototype.start = function (when) {
            if (when === void 0) { when = 0; }
            this._nativeNode.start(when);
            if (this._constantSourceNodeRenderer !== null) {
                this._constantSourceNodeRenderer.start = when;
            }
        };
        ConstantSourceNode.prototype.stop = function (when) {
            if (when === void 0) { when = 0; }
            this._nativeNode.stop(when);
            if (this._constantSourceNodeRenderer !== null) {
                this._constantSourceNodeRenderer.stop = when;
            }
        };
        return ConstantSourceNode;
    }(noneAudioDestinationNodeConstructor));
};
//# sourceMappingURL=/build/es2015/factories/constant-source-node-constructor.js.map