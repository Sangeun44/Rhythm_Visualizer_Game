import * as tslib_1 from "tslib";
import { getNativeContext } from '../helpers/get-native-context';
// The DEFAULT_OPTIONS are only of type Partial<IOscillatorOptions> because there is no default value for periodicWave.
var DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    detune: 0,
    frequency: 440,
    type: 'sine'
};
export var createOscillatorNodeConstructor = function (createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) {
    return /** @class */ (function (_super) {
        tslib_1.__extends(OscillatorNode, _super);
        function OscillatorNode(context, options) {
            if (options === void 0) { options = DEFAULT_OPTIONS; }
            var _this = this;
            var nativeContext = getNativeContext(context);
            var mergedOptions = tslib_1.__assign({}, DEFAULT_OPTIONS, options);
            var nativeNode = createNativeOscillatorNode(nativeContext, mergedOptions);
            var isOffline = isNativeOfflineAudioContext(nativeContext);
            var oscillatorNodeRenderer = (isOffline) ? createOscillatorNodeRenderer() : null;
            _this = _super.call(this, context, nativeNode, oscillatorNodeRenderer) || this;
            // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.
            _this._detune = createAudioParam(context, isOffline, nativeNode.detune, 3.4028234663852886e38, -3.4028234663852886e38);
            // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.
            _this._frequency = createAudioParam(context, isOffline, nativeNode.frequency, context.sampleRate / 2, -(context.sampleRate / 2));
            _this._nativeNode = nativeNode;
            _this._oscillatorNodeRenderer = oscillatorNodeRenderer;
            return _this;
        }
        Object.defineProperty(OscillatorNode.prototype, "detune", {
            get: function () {
                return this._detune;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OscillatorNode.prototype, "frequency", {
            get: function () {
                return this._frequency;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OscillatorNode.prototype, "onended", {
            get: function () {
                return this._nativeNode.onended;
            },
            set: function (value) {
                this._nativeNode.onended = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OscillatorNode.prototype, "type", {
            get: function () {
                return this._nativeNode.type;
            },
            set: function (value) {
                this._nativeNode.type = value;
                // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.
                if (value === 'custom') {
                    throw createInvalidStateError();
                }
            },
            enumerable: true,
            configurable: true
        });
        OscillatorNode.prototype.setPeriodicWave = function (periodicWave) {
            this._nativeNode.setPeriodicWave(periodicWave);
        };
        OscillatorNode.prototype.start = function (when) {
            if (when === void 0) { when = 0; }
            this._nativeNode.start(when);
            if (this._oscillatorNodeRenderer !== null) {
                this._oscillatorNodeRenderer.start = when;
            }
        };
        OscillatorNode.prototype.stop = function (when) {
            if (when === void 0) { when = 0; }
            this._nativeNode.stop(when);
            if (this._oscillatorNodeRenderer !== null) {
                this._oscillatorNodeRenderer.stop = when;
            }
        };
        return OscillatorNode;
    }(noneAudioDestinationNodeConstructor));
};
//# sourceMappingURL=/build/es2015/factories/oscillator-node-constructor.js.map