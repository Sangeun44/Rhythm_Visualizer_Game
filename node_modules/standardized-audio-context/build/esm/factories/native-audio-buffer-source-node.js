import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';
import { cacheTestResult } from '../helpers/cache-test-result';
import { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from '../support-testers/audio-buffer-source-node-start-method-consecutive-calls';
import { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from '../support-testers/audio-scheduled-source-node-start-method-negative-parameters';
import { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from '../support-testers/audio-scheduled-source-node-stop-method-consecutive-calls';
import { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from '../support-testers/audio-scheduled-source-node-stop-method-negative-parameters';
import { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../wrappers/audio-buffer-source-node-start-method-consecutive-calls';
import { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../wrappers/audio-scheduled-source-node-start-method-negative-parameters';
import { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from '../wrappers/audio-scheduled-source-node-stop-method-consecutive-calls';
import { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../wrappers/audio-scheduled-source-node-stop-method-negative-parameters';
export var createNativeAudioBufferSourceNode = function (nativeContext, options) {
    if (options === void 0) { options = {}; }
    var nativeNode = nativeContext.createBufferSource();
    assignNativeAudioNodeOptions(nativeNode, options);
    // Bug #71: Edge does not allow to set the buffer to null.
    if (options.buffer !== undefined && options.buffer !== null) {
        nativeNode.buffer = options.buffer;
    }
    // @todo if (options.detune !== undefined) {
    // @todo    nativeNode.detune.value = options.detune;
    // @todo }
    if (options.loop !== undefined) {
        nativeNode.loop = options.loop;
    }
    if (options.loopEnd !== undefined) {
        nativeNode.loopEnd = options.loopEnd;
    }
    if (options.loopStart !== undefined) {
        nativeNode.loopStart = options.loopStart;
    }
    if (options.playbackRate !== undefined) {
        nativeNode.playbackRate.value = options.playbackRate;
    }
    // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.
    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, function () { return testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext); })) {
        wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeNode);
    }
    // Bug #44: Only Chrome & Opera throw a RangeError yet.
    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, function () { return testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext); })) {
        wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeNode);
    }
    // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.
    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, function () { return testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext); })) {
        wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeNode, nativeContext);
    }
    // Bug #44: No browser does throw a RangeError yet.
    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, function () { return testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext); })) {
        wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeNode);
    }
    return nativeNode;
};
//# sourceMappingURL=/build/es2015/factories/native-audio-buffer-source-node.js.map