import * as tslib_1 from "tslib";
import { connectAudioParam } from '../helpers/connect-audio-param';
import { getNativeNode } from '../helpers/get-native-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderAutomation } from '../helpers/render-automation';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export const createOscillatorNodeRendererFactory = (createNativeOscillatorNode) => {
    return () => {
        let nativeNode = null;
        let start = null;
        let stop = null;
        return {
            set start(value) {
                start = value;
            },
            set stop(value) {
                stop = value;
            },
            render: (proxy, offlineAudioContext) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (nativeNode !== null) {
                    return nativeNode;
                }
                nativeNode = getNativeNode(proxy);
                // If the initially used nativeNode was not constructed on the same OfflineAudioContext it needs to be created again.
                if (!isOwnedByContext(nativeNode, offlineAudioContext)) {
                    const options = {
                        channelCount: nativeNode.channelCount,
                        channelCountMode: nativeNode.channelCountMode,
                        channelInterpretation: nativeNode.channelInterpretation,
                        detune: nativeNode.detune.value,
                        frequency: nativeNode.frequency.value,
                        // @todo periodicWave is not exposed by the native node.
                        type: nativeNode.type
                    };
                    nativeNode = createNativeOscillatorNode(offlineAudioContext, options);
                    if (start !== null) {
                        nativeNode.start(start);
                    }
                    if (stop !== null) {
                        nativeNode.stop(stop);
                    }
                    yield renderAutomation(proxy.context, offlineAudioContext, proxy.detune, nativeNode.detune);
                    yield renderAutomation(proxy.context, offlineAudioContext, proxy.frequency, nativeNode.frequency);
                }
                else {
                    yield connectAudioParam(proxy.context, offlineAudioContext, proxy.detune);
                    yield connectAudioParam(proxy.context, offlineAudioContext, proxy.frequency);
                }
                yield renderInputsOfAudioNode(proxy, offlineAudioContext, nativeNode);
                return nativeNode;
            })
        };
    };
};
//# sourceMappingURL=/build/es2015/factories/oscillator-node-renderer-factory.js.map