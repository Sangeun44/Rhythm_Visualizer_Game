import { getNativeContext } from '../helpers/get-native-context';
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    fftSize: 2048,
    maxDecibels: -30,
    minDecibels: -100,
    smoothingTimeConstant: 0.8
};
export const createAnalyserNodeConstructor = (createAnalyserNodeRenderer, createNativeAnalyserNode, isNativeOfflineAudioContext, noneAudioDestinationNodeConstructor) => {
    return class AnalyserNode extends noneAudioDestinationNodeConstructor {
        constructor(context, options = DEFAULT_OPTIONS) {
            const nativeContext = getNativeContext(context);
            const mergedOptions = Object.assign({}, DEFAULT_OPTIONS, options);
            const nativeNode = createNativeAnalyserNode(nativeContext, mergedOptions);
            const analyserNodeRenderer = (isNativeOfflineAudioContext(nativeContext)) ? createAnalyserNodeRenderer() : null;
            super(context, nativeNode, analyserNodeRenderer);
            this._nativeNode = nativeNode;
        }
        get fftSize() {
            return this._nativeNode.fftSize;
        }
        set fftSize(value) {
            this._nativeNode.fftSize = value;
        }
        get frequencyBinCount() {
            return this._nativeNode.frequencyBinCount;
        }
        get maxDecibels() {
            return this._nativeNode.maxDecibels;
        }
        set maxDecibels(value) {
            this._nativeNode.maxDecibels = value;
        }
        get minDecibels() {
            return this._nativeNode.minDecibels;
        }
        set minDecibels(value) {
            this._nativeNode.minDecibels = value;
        }
        get smoothingTimeConstant() {
            return this._nativeNode.smoothingTimeConstant;
        }
        set smoothingTimeConstant(value) {
            this._nativeNode.smoothingTimeConstant = value;
        }
        getByteFrequencyData(array) {
            this._nativeNode.getByteFrequencyData(array);
        }
        getByteTimeDomainData(array) {
            this._nativeNode.getByteTimeDomainData(array);
        }
        getFloatFrequencyData(array) {
            this._nativeNode.getFloatFrequencyData(array);
        }
        getFloatTimeDomainData(array) {
            this._nativeNode.getFloatTimeDomainData(array);
        }
    };
};
//# sourceMappingURL=/build/es2015/factories/analyser-node-constructor.js.map