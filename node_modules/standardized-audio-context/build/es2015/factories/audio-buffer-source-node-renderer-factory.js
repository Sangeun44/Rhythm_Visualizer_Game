import * as tslib_1 from "tslib";
import { getNativeNode } from '../helpers/get-native-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export const createAudioBufferSourceNodeRendererFactory = (createNativeAudioBufferSourceNode) => {
    return () => {
        let nativeNode = null;
        let start = null;
        let stop = null;
        return {
            set start(value) {
                start = value;
            },
            set stop(value) {
                stop = value;
            },
            render: (proxy, offlineAudioContext) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (nativeNode !== null) {
                    return nativeNode;
                }
                nativeNode = getNativeNode(proxy);
                // If the initially used nativeNode was not constructed on the same OfflineAudioContext it needs to be created again.
                if (!isOwnedByContext(nativeNode, offlineAudioContext)) {
                    const options = {
                        buffer: nativeNode.buffer,
                        channelCount: nativeNode.channelCount,
                        channelCountMode: nativeNode.channelCountMode,
                        channelInterpretation: nativeNode.channelInterpretation,
                        detune: 0,
                        loop: nativeNode.loop,
                        loopEnd: nativeNode.loopEnd,
                        loopStart: nativeNode.loopStart,
                        playbackRate: nativeNode.playbackRate.value
                    };
                    nativeNode = createNativeAudioBufferSourceNode(offlineAudioContext, options);
                    if (start !== null) {
                        nativeNode.start(...start);
                    }
                    if (stop !== null) {
                        nativeNode.stop(stop);
                    }
                }
                yield renderInputsOfAudioNode(proxy, offlineAudioContext, nativeNode);
                return nativeNode;
            })
        };
    };
};
//# sourceMappingURL=/build/es2015/factories/audio-buffer-source-node-renderer-factory.js.map