import * as tslib_1 from "tslib";
import { connectAudioParam } from '../helpers/connect-audio-param';
import { getNativeNode } from '../helpers/get-native-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderAutomation } from '../helpers/render-automation';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export const createBiquadFilterNodeRendererFactory = (createNativeBiquadFilterNode) => {
    return () => {
        let nativeNode = null;
        return {
            render: (proxy, offlineAudioContext) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (nativeNode !== null) {
                    return nativeNode;
                }
                nativeNode = getNativeNode(proxy);
                // If the initially used nativeNode was not constructed on the same OfflineAudioContext it needs to be created again.
                if (!isOwnedByContext(nativeNode, offlineAudioContext)) {
                    const options = {
                        Q: nativeNode.Q.value,
                        channelCount: nativeNode.channelCount,
                        channelCountMode: nativeNode.channelCountMode,
                        channelInterpretation: nativeNode.channelInterpretation,
                        detune: nativeNode.detune.value,
                        frequency: nativeNode.frequency.value,
                        gain: nativeNode.gain.value,
                        type: nativeNode.type
                    };
                    nativeNode = createNativeBiquadFilterNode(offlineAudioContext, options);
                    yield renderAutomation(proxy.context, offlineAudioContext, proxy.Q, nativeNode.Q);
                    yield renderAutomation(proxy.context, offlineAudioContext, proxy.detune, nativeNode.detune);
                    yield renderAutomation(proxy.context, offlineAudioContext, proxy.frequency, nativeNode.frequency);
                    yield renderAutomation(proxy.context, offlineAudioContext, proxy.gain, nativeNode.gain);
                }
                else {
                    yield connectAudioParam(proxy.context, offlineAudioContext, proxy.Q);
                    yield connectAudioParam(proxy.context, offlineAudioContext, proxy.detune);
                    yield connectAudioParam(proxy.context, offlineAudioContext, proxy.frequency);
                    yield connectAudioParam(proxy.context, offlineAudioContext, proxy.gain);
                }
                yield renderInputsOfAudioNode(proxy, offlineAudioContext, nativeNode);
                return nativeNode;
            })
        };
    };
};
//# sourceMappingURL=/build/es2015/factories/biquad-filter-node-renderer-factory.js.map